---
import type { GetStaticPaths } from "astro"
import { getCollection, getEntry, render } from "astro:content"
import { Image } from "astro:assets"
import HtmlLayout from "@/layouts/html.astro"
import { getLangFromUrl, useTranslations } from "@/i18n/utils"
import { postReadableDate } from "@/ts/functions"
import PostTag from "@/components/PostTag.vue"
import PostReactions from "@/components/PostReactions.vue"
import PostTranslationLink from "@/components/PostTranslationLink.astro"

export const getStaticPaths = (async () => {
  const posts = await getCollection("posts", (post) => !post.id.includes("/"))

  function getPostUrl(post: {
    id: string
    data: { date: Date }
  }): [string, string, string] {
    const year = post.data.date.getFullYear().toString()
    const month = (post.data.date.getMonth() + 1).toString().padStart(2, "0")
    const slug = post.id.replace(/\d{4}-\d{2}-\d{2}-/, "")

    return [year, month, slug]
  }

  return posts.map((post) => ({
    params: { slug: getPostUrl(post).join("/") },
    props: { post },
  }))
}) satisfies GetStaticPaths

const { post } = Astro.props

const author = await getEntry(post.data.author)
const tags = Object.fromEntries(
  (await getCollection("tags")).map(({ id, data }) => [id, data]),
)

const authorTelegramUrl =
  author?.data.social?.find(({ type }) => type === "telegram")?.url ?? ""

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const postDate = postReadableDate(lang, post.data.date)
const { Content } = await render(post)

const renderedExcerpt = post.rendered?.html.split(
  `<!-- ${t("Seguir leyendo")} -->`,
)[0]

const excerpt = renderedExcerpt?.replace(/<\/?[^>]+(>|$)/g, "") ?? ""

function getTagClass(tag: string): string {
  return tags[tag.toLowerCase()] ?? ""
}
---

<HtmlLayout title={`${post.data.title} | Halivert`}>
  <Fragment slot="head">
    <meta
      property="unix_timestamp"
      content={post.data.date.getTime().toString()}
    />

    <meta property="author:name" content={author?.data.firstName ?? ""} />
    <meta property="telegram:author" content={authorTelegramUrl} />
    <meta property="telegram:channel" content="@halivertsblog" />

    <meta property="og:title" content={post.data.title} />
    <meta property="author" content={post.data.author.id} />
    <meta property="og:locale" content={lang} />
    <meta property="description" content={excerpt} />
    <meta property="og:description" content={excerpt} />
    <link rel="canonical" href={post.data.canonicalUrl || Astro.url} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:sitename" content="Halivert" />
    <meta property="og:type" content="article" />
    <meta
      property="article:published_time"
      content={post.data.date.toISOString()}
    />

    <meta
      name="twitter:card"
      content={post.data.image ? "summary_large_image" : "summary"}
    />

    {
      post.data.image && (
        <>
          <meta property="og:image" content={post.data.image.src} />
          <meta name="twitter:image" content={post.data.image.src} />
        </>
      )
    }

    <meta property="twitter:title" content={post.data.title} />

    {
      post.data.hasMath ? (
        <meta property="has_instant_view" content="false" />
      ) : post.data.hasInstantView ? (
        <meta property="has_instant_view" content="true" />
      ) : (
        <meta property="has_instant_view" content="false" />
      )
    }
  </Fragment>

  <main class="lg:text-xl text-lg" style="grid-area: main;">
    <div class="flex flex-nowrap px-4 py-2 lg:py-4 lg:px-12">
      <div class="flex-1 basis-1/12 hidden lg:block"></div>
      <div class="flex-1 basis-11/12 min-w-0">
        <div class="max-w-prose space-y-4">
          <div class="max-w-full flex gap-3 items-center flex-wrap">
            <header class="flex-1 flex-shrink-0 basis-3/4">
              <h1 class="text-4xl mb-6 font-title font-semibold">
                {post.data.title}
              </h1>
              <small>
                <i>{t("por")}</i>
                <a>{author?.data.firstName}</a> -

                {
                  post.data.lastModification && (
                    <span title={` ${t("Fecha original")}: ${postDate} `}>
                      <i>{t("última modificación")}:</i>
                      {postReadableDate(lang, post.data.lastModification)}
                    </span>
                  )
                }

                {
                  !post.data.lastModification && (
                    <>
                      <i>{t("publicado")}:</i> {postDate}
                    </>
                  )
                }
              </small>
            </header>

            {
              post.data.image && (
                <div class="basis-1/5 min-w-32">
                  <Image
                    class="max-w-full"
                    src={post.data.image}
                    alt={post.data.imageAlt ?? ""}
                  />
                </div>
              )
            }
          </div>
          <div class="flex justify-between">
            <div class="flex-1 flex gap-2 text-sm">
              {
                post.data.tags?.map((tag) => (
                  <PostTag class={getTagClass(tag)}>{tag}</PostTag>
                ))
              }
            </div>

            <div class="flex-1 text-right">
              {
                post.data.translations?.map((translation) => (
                  <PostTranslationLink translation={translation} />
                ))
              }
            </div>
          </div>
          <hr />
          <section id="content" class="content text-balance">
            <Content />
          </section>

          <PostReactions
            client:load
            url={Astro.url}
            author={author?.data.username ?? ""}
            title={post.data.title}
          />

          <!-- <div class="printable"> -->
          <!-- 	<p class="has-text-right"> -->
          <!-- 		<a href="{{ page.url | absolute_url }}"> -->
          <!-- 			{{ page.url | absolute_url }} -->
          <!-- 		</a> -->
          <!-- 	</p> -->
          <!-- </div> -->
        </div>
      </div>
    </div>
  </main>

  {
    post.data.hasMath && (
      <Fragment>
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/katex.min.css"
          integrity="sha384-veTAhWILPOotXm+kbR5uY7dRamYLJf58I7P+hJhjeuc7hsMAkJHTsPahAl0hBST0"
          crossorigin="anonymous"
        />
        <script
          is:inline
          defer
          src="https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/katex.min.js"
          integrity="sha384-v6mkHYHfY/4BWq54f7lQAdtIsoZZIByznQ3ZqN38OL4KCsrxo31SLlPiak7cj/Mg"
          crossorigin="anonymous"
        />
        <script
          is:inline
          defer
          src="https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/contrib/auto-render.min.js"
          integrity="sha384-hCXGrW6PitJEwbkoStFjeJxv+fSOOQKOPbJxSfM6G5sWZjAyWhXiTIIAmQqnlLlh"
          crossorigin="anonymous"
          onload="renderMathInElement(document.getElementById('content'));"
        />
      </Fragment>
    )
  }
</HtmlLayout>
